{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","data","options","tooltips","callbacks","title","label","item","datasetLabel","datasets","datasetIndex","comment","yLabel","note","getComment","xLabel","onChange","event","city","getCity","target","value","getJson","then","result","setData","state","url","fetch","json","this","labels","stingency","no2","i","push","x","y","Math","round","getCommentData","setState","fill","lineTension","backgroundColor","borderColor","borderCapStyle","borderDash","borderDashOffset","borderJoinStyle","pointBorderColor","pointBackgroundColor","pointBorderWidth","pointHoverRadius","pointHoverBackgroundColor","pointHoverBorderColor","pointHoverBorderWidth","pointRadius","pointHitRadius","date","className","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.8affd8ff.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\nimport { Line } from 'react-chartjs-2';\n\nclass App extends React.Component {\n\n    constructor() {\n        super();\n\n        this.state = {\n            data: {},\n        }\n    }\n\n    data = {};\n\n    options = {\n        tooltips: {\n            callbacks: {\n                title: function () {\n                    return \"\";\n                },\n                label: (item, data) => {\n                    let datasetLabel = data.datasets[item.datasetIndex].label || \"\";\n                    let dataPoint = item.yLabel;\n                    let comment = datasetLabel + \": \" + dataPoint;\n\n                    if (!datasetLabel) {\n                        return '';\n                    }\n\n                    let note = this.getComment(item.xLabel);\n\n                    if (note) {\n                        comment += '. ' + note\n                    }\n\n                    return comment;\n                }\n            }\n        }\n    }\n\n    async getJson(url) {\n        const result = await fetch(url);\n        return await result.json();\n    }\n\n    setData(result, city) {\n        this.data = result;\n\n        const labels = [];\n        const stingency = [];\n        const no2 = [];\n\n        for (let i in result) {\n            if (!result[i]['Date'] || result[i]['Stringency'] === 'NA') {\n                continue;\n            }\n\n            labels.push(result[i]['Date'])\n            stingency.push({\n                x: result[i]['Date'],\n                y: Math.round(result[i]['Stringency'], 2),\n            });\n\n            no2.push({\n                x: result[i]['Date'],\n                y: Math.round(result[i][city], 2),\n            });\n        }\n\n        const comment = this.getCommentData(result);\n\n        this.setState({\n            data: {\n                labels: labels,\n                datasets: [\n                    {\n                        label: 'Stringency',\n                        fill: false,\n                        lineTension: 0.1,\n                        backgroundColor: 'rgba(75,192,192,0.4)',\n                        borderColor: 'rgba(75,192,192,1)',\n                        borderCapStyle: 'butt',\n                        borderDash: [],\n                        borderDashOffset: 0.0,\n                        borderJoinStyle: 'miter',\n                        pointBorderColor: 'rgba(75,192,192,1)',\n                        pointBackgroundColor: '#fff',\n                        pointBorderWidth: 1,\n                        pointHoverRadius: 5,\n                        pointHoverBackgroundColor: 'rgba(75,192,192,1)',\n                        pointHoverBorderColor: 'rgba(220,220,220,1)',\n                        pointHoverBorderWidth: 2,\n                        pointRadius: 0,\n                        pointHitRadius: 10,\n                        data: stingency\n                    },\n                    {\n                        label: 'NO2',\n                        fill: false,\n                        lineTension: 0.1,\n                        backgroundColor: 'rgba(75,192,192,0.4)',\n                        borderColor: 'rgb(152,146,213)',\n                        borderCapStyle: 'butt',\n                        borderDash: [],\n                        borderDashOffset: 0.0,\n                        borderJoinStyle: 'miter',\n                        pointBorderColor: 'rgb(152,146,213)',\n                        pointBackgroundColor: '#fff',\n                        pointBorderWidth: 1,\n                        pointHoverRadius: 1,\n                        pointHoverBackgroundColor: 'rgb(152,146,213)',\n                        pointHoverBorderColor: 'rgba(220,220,220,1)',\n                        pointHoverBorderWidth: 1,\n                        pointRadius: 1,\n                        pointHitRadius: 10,\n                        data: no2\n                    },\n                    {\n                        label: '',\n                        fill: false,\n                        lineTension: 0.1,\n                        backgroundColor: 'rgba(75,192,192,0.0)',\n                        borderColor: 'rgba(152,146,213, 0)',\n                        borderCapStyle: 'butt',\n                        borderDash: [],\n                        borderDashOffset: 0.0,\n                        borderJoinStyle: 'miter',\n                        pointBorderColor: 'rgba(75,192,192,1)',\n                        pointBackgroundColor: 'rgba(75,192,192,1)',\n                        pointBorderWidth: 1,\n                        pointHoverRadius: 1,\n                        pointHoverBackgroundColor: 'rgba(75,192,192,1)',\n                        pointHoverBorderColor: 'rgba(220,220,220,1)',\n                        pointHoverBorderWidth: 1,\n                        pointRadius: 5,\n                        pointHitRadius: 10,\n                        data: comment\n                    },\n                ]\n            }\n        });\n    }\n\n    componentDidMount() {\n        this.getJson('uk.json').then((result) => {\n            this.setData(result, 'London');\n        });\n    }\n\n    getComment(date) {\n        for (let i in this.data) {\n            if (this.data[i]['Date'] === date) {\n                return this.data[i]['Comment']\n            }\n        }\n\n        return '';\n    }\n\n    onChange = event => {\n        const city = this.getCity(event.target.value);\n\n        this.getJson(event.target.value + '.json').then((result) => {\n            this.setData(result, city);\n        });\n    };\n\n    render() {\n        return (\n            <div className=\"App\">\n                <select onChange={this.onChange}>\n                    <option value=\"uk\">London, United Kingdom</option>\n                    <option value=\"sweden\">Stockholm, Sweden</option>\n                    <option value=\"croatia\">Zagreb, Croatia</option>\n                    <option value=\"serbia\">Belgrade, Serbia</option>\n                </select>\n                <Line data={this.state.data} options={this.options}/>\n            </div>\n        );\n    }\n\n    getCommentData(result) {\n        const data = [];\n\n        for (let i in result) {\n            if (result[i]['Date']) {\n                let note = this.getComment(result[i]['Date']);\n\n                if (note) {\n                    data.push({\n                        x: result[i]['Date'],\n                        y: Math.round(result[i]['Stringency'], 2),\n                    });\n                }\n            }\n        }\n\n        return data;\n    }\n\n    getCity(value) {\n        const data = {\n            'uk': 'London',\n            'croatia': 'Zagreb',\n            'sweden': 'Stockholm',\n            'serbia': 'Belgrade',\n        };\n\n\n        return data[value];\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}